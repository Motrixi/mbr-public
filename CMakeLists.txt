PROJECT(http_augmentors_event)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(VERBOSELOGHIGH false CACHE BOOLEAN "compile with verbose logging")
SET(COVERAGE false CACHE BOOLEAN "compile with gcov flas")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules")

SET(CUSTOM_CPP_FLAGS "")
if(COVERAGE)
	SET(PYTHON_EXECUTABLE "python")
	INCLUDE(CodeCoverage)
	SETUP_TARGET_FOR_COVERAGE(coverage "${CMAKE_SOURCE_DIR}/test/run_tests.sh" coverage)
        SET(CUSTOM_CPP_FLAGS "${CUSTOM_CPP_FLAGS} -fprofile-arcs -ftest-coverage")
elseif(COBERTURA)
	SET(PYTHON_EXECUTABLE "python")
        INCLUDE(CodeCoverage)
        SETUP_TARGET_FOR_COVERAGE_COBERTURA(coverage "${CMAKE_SOURCE_DIR}/test/run_tests.sh" coverage)
        SET(CUSTOM_CPP_FLAGS "${CUSTOM_CPP_FLAGS} -fprofile-arcs -ftest-coverage")
endif(COVERAGE)

if(VERBOSELOGHIGH)
	SET(CUSTOM_CPP_FLAGS "${CUSTOM_CPP_FLAGS} -DVERBOSELOG")
endif(VERBOSELOGHIGH)


SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fpermissive -std=c++0x ${CUSTOM_CPP_FLAGS}")
MESSAGE(${CMAKE_CXX_FLAGS})
SET(CMAKE_BUILD_TYPE Debug)
SET(Boost_USE_MULTITHREADED ON)

# Dependencies

#Use boost framework to test
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/src")

FIND_PACKAGE(Gflags REQUIRED)
FIND_PACKAGE(Glog REQUIRED)
FIND_PACKAGE(libevent REQUIRED)
FIND_PACKAGE(Boost REQUIRED)

INCLUDE_DIRECTORIES(${GFLAGS_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GLOG_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${EVENT_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})

#Setup CMake to run tests
ENABLE_TESTING()

 
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(test)
